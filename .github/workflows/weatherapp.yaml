name: 'WeatherApp Deployment Pipeline'

on: workflow_dispatch


env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: weather_app
  EKS_CLUSTER: weatherapp-eks

jobs:
  Testing:
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v2

      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      - name: SonarQube Scan
        run: |
           npm install -g sonar-scanner
           sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=. \

      # Check the Quality Gate status.
     # - name: SonarQube Quality Gate check
     #   id: sonarqube-quality-gate-check
     #   uses: sonarsource/sonarqube-quality-gate-action@master
      #  timeout-minutes: 5
     #   env:
     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}


  Build_and_Publish:

    needs: Testing
    runs-on: ubuntu-latest


    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Build & Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: ${{ env.ECR_REPOSITORY }}
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: weather-app/weather_app/Dockerfile
        context: ./




  Deploy-To-EKS:
        needs: Build_and_Publish
        runs-on: ubuntu-latest
        steps:

          - name: Code checkout
            uses: actions/checkout@v4
    
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}


          - name: Get Kube config file
            run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
    
          - name: Print config file
            run: cat ~/.kube/config
    

          # Check if Docker registry secret exists
          - name: Check for existing Docker registry secret
            id: check-secret
            run: |
              if kubectl get secret regcred; then
                echo "Secret exists."
                echo "exists=true" >> $GITHUB_ENV
              else
                echo "Secret does not exist."
                echo "exists=false" >> $GITHUB_ENV
              fi

          # Create Docker registry secret if it does not exist
          - name: Login to ECR
            if: env.exists == 'false'
            run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password)


          - name: Deploy Helm
            uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
                cluster-name: ${{ env.EKS_CLUSTER }}
                #config-files: .github/values/dev.yaml
                chart-path: weather-app/weather_app_charts
                namespace: default
                values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
                name: weather-app-stack 